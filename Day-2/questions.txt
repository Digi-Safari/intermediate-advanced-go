q1. Create a function named as StringManipulation.
        StringManipulation accepts a function and string type as an argument, and it returns string value
        Possible Functions that it can accept:- trimSpace, toUpper, greet

        Create 3 functions trimSpace, toUpper, greet
        TrimSpace:- TrimSpace returns a string, with all leading and trailing white space removed, as defined by Unicode.
        ToUpper:- ToUpper returns string with all Unicode letters mapped to their upper case.
        Greet: - It takes a name as input, add hello as greeting and return the greeting
        Hint: use strings package for TrimSpace and ToUpper functionalities

q2. Create a struct (Author)
        Two Field:- Name, Books[slice]
        Create two methods, one appends new books to the book slice , other prints the struct

        Create a function that accepts the struct and append values to the book slice

        Create a function that would accept the Books field, not the struct and append some more books

q3. Create the following directory structure
                app-/
                    ├──stores/
                    │  └── store.go
                       └── models.go // to store domain structs
                    │    ├── mysql/
                    │    │   └── mysql.go
                    │    ├── postgres/
                    │       └── postgres.go
                    └── main.go
                    ├── go.mod

        In mysql.go create a Conn struct which stores db connection in string form
        Create three methods over Conn struct (Create(user) error, Update(name) error, Delete(id) error
        //Note:- return nil for the errors, assume no error would happen
        //For now add simple print statement without doing any actual work

        In postgres.go repeat the same steps as we did in mysql.go

        In store.go
            Create an interface that postgres and mysql package can implement

        In main.go
            Call postgres and mysql package methods using interface variable